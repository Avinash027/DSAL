=== DSA5: Threaded Binary Tree Implementation ===

1. CONCEPT EXPLANATION
---------------------
A Threaded Binary Tree (TBT) is a binary tree variant where "null" pointers are replaced by "threads" that point to inorder predecessor or successor, making traversal more efficient without recursion or stack.
Source: https://www.geeksforgeeks.org/threaded-binary-tree/

2. INPUT/OUTPUT SPECIFICATIONS
----------------------------
INPUT:
- Integer values for nodes
- Choice of operation (1-4)

OUTPUT:
- Binary tree display
- Threaded node display
- Traversal results

3. DATA STRUCTURES USED
----------------------
Node Structure:
```cpp
struct node {
    int data;
    node *left, *right;
    int lbit, rbit;  // Thread indicators
};
```

4. THREADING CONCEPT
------------------
Thread Indicators (bit values):
- lbit = 0: Left pointer is a thread
- lbit = 1: Left pointer points to child
- rbit = 0: Right pointer is a thread
- rbit = 1: Right pointer points to child

5. OPERATIONS IMPLEMENTED
------------------------
1. INSERT NODE:
   Process:
   - Create new node
   - Find insertion position
   - Update threads
   - Maintain threading properties
   Time Complexity: O(h)

2. INORDER TRAVERSAL:
   Benefits:
   - No stack required
   - Constant extra space
   - Linear time traversal
   
   Algorithm:
   ```cpp
   void inorder() {
       node* current = leftmost(root);
       while(current) {
           visit(current);
           if(current->rbit)
               current = leftmost(current->right);
           else
               current = current->right;
       }
   }
   ```

3. THREAD CREATION:
   Steps:
   - Identify null pointers
   - Create appropriate threads
   - Update thread indicators

6. TIME & SPACE COMPLEXITY
-------------------------
Time Complexity:
- Insertion: O(h)
- Traversal: O(n)
- Thread Creation: O(n)

Space Complexity:
- O(1) for traversal (main advantage)
- O(n) for tree storage

Where h = height, n = number of nodes

7. ADVANTAGES & DISADVANTAGES
---------------------------
Advantages:
1. Efficient Traversal:
   - No stack needed
   - Constant extra space
   - Quick predecessor/successor access

2. Memory Utilization:
   - Uses null pointers effectively
   - No wasted space

Disadvantages:
1. Complex Insertion/Deletion:
   - Thread maintenance overhead
   - More complicated operations

2. Extra Storage:
   - Thread indicator bits needed
   - Slightly more space per node

8. PRACTICAL APPLICATIONS
-----------------------
1. Expression Tree Processing:
   - Efficient evaluation
   - Easy traversal

2. Directory Structure:
   - File system navigation
   - Quick parent access

3. Game Trees:
   - Move generation
   - State traversal

9. IMPLEMENTATION DETAILS
-----------------------
1. Node Creation:
```cpp
node* create() {
    node* p = new node;
    p->left = NULL;
    p->right = NULL;
    p->lbit = 0;
    p->rbit = 0;
    cout << "\n Enter data:";
    cin >> p->data;
    return p;
}
```

2. Threading Process:
```cpp
void thread(node* root) {
    if(root->lbit == 1)
        thread(root->left);
    if(root->lbit == 0 || root->rbit == 0)
        cout << root->data;
    if(root->rbit == 1)
        thread(root->right);
}
```

10. ERROR HANDLING
----------------
1. Empty Tree:
   - Proper initialization
   - Null checks

2. Threading Errors:
   - Bit validation
   - Pointer verification

3. Memory Management:
   - Proper deletion
   - Thread updates

11. OPTIMIZATION TECHNIQUES
------------------------
1. Efficient Threading:
   - Minimize pointer updates
   - Optimize bit operations

2. Memory Usage:
   - Compact node structure
   - Efficient thread storage

3. Traversal Speed:
   - Direct successor access
   - No recursive calls

12. CODE IMPROVEMENT SUGGESTIONS
-----------------------------
1. Add deletion operation
2. Implement double threading
3. Add balance maintenance
4. Include range operations
5. Add visualization support

13. COMMON ISSUES & SOLUTIONS
--------------------------
1. Lost Threads:
   Solution: Careful pointer management

2. Incorrect Threading:
   Solution: Thorough testing

3. Memory Leaks:
   Solution: Proper cleanup routines

14. EXAMPLE OPERATIONS
-------------------
Input Tree:
```
       5
      / \
     3   7
    / \
   1   4
```

Threading:
- 1's right points to 3
- 4's right points to 5
- 3's right points to 7